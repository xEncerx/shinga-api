"""update_enums

Revision ID: 36924eefd562
Revises: 6849ebfbcf6b
Create Date: 2025-07-07 01:46:39.999570

"""
from typing import Sequence, Union

from app.infrastructure.db.models.title.relations import TitleGenre
import sqlmodel.sql.sqltypes
import sqlalchemy as sa
import json

from alembic import op

from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '36924eefd562'
down_revision: Union[str, None] = '6849ebfbcf6b'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    title_genre_enum = sa.Enum(*[i.name for i in TitleGenre], name="titlegenre")
    title_genre_enum.create(op.get_bind())

    # Добавляем временную колонку нового типа
    op.add_column('titles', sa.Column(
        'genres_new', 
        postgresql.ARRAY(title_genre_enum),
        nullable=True
    ))

    conn = op.get_bind()
    
    # Сначала получаем все данные
    rows = conn.execute(sa.text("SELECT id, genres FROM titles WHERE genres IS NOT NULL")).fetchall()
    
    # Подготавливаем данные для массового обновления
    updates = []
    for id, genres_json in rows:
        if not genres_json:
            continue
        
        new_genres = []
        try:
            genres_list = json.loads(genres_json) if isinstance(genres_json, str) else genres_json
            for genre_item in genres_list:
                if 'en' in genre_item:
                    genre_enum = TitleGenre.get(genre_item['en'])
                    if genre_enum:
                        new_genres.append(genre_enum.name)
        except (json.JSONDecodeError, TypeError):
            continue
        
        if new_genres:
            updates.append({'id': id, 'genres': new_genres})
    
    # Выполняем массовое обновление
    if updates:
        conn.execute(
            sa.text("UPDATE titles SET genres_new = :genres WHERE id = :id"),
            [{'genres': u['genres'], 'id': u['id']} for u in updates]
        )

    # Удаляем старую колонку
    op.drop_column('titles', 'genres')
    
    # Переименовываем новую колонку
    op.alter_column('titles', 'genres_new', new_column_name='genres')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('titles', 'genres',
               existing_type=sa.Enum('ACTION', 'ADVENTURE', 'AVANT_GARDE', 'AWARD_WINNING', 'GENDER_INTRIGUE', 'HEROIC_FANTASY', 'BOYS_LOVE', 'COMEDY', 'DRAMA', 'COMBAT', 'HUMOR', 'MURIM', 'SCHOOL_LIFE', 'FANTASTIC', 'THRILLER', 'TRAGEDY', 'PSYCHOLOGY', 'POST_APOCALYPTIC', 'ELEMENTS_OF_HUMOR', 'KODOMO', 'CYBERPUNK', 'HISTORY', 'FANTASY', 'GIRLS_LOVE', 'GOURMET', 'HORROR', 'MYSTERY', 'ROMANCE', 'SCI_FI', 'SLICE_OF_LIFE', 'SPORTS', 'SUPERNATURAL', 'SUSPENSE', 'SEINEN', 'SHOUNEN', 'DOUJINSHI', 'SHOUJO', 'JOSEI', 'YAOI', 'ECCHI', 'EROTICA', 'HENTAI', 'ADULT_CAST', 'ANTHROPOMORPHIC', 'CGDCT', 'CHILDCARE', 'COMBAT_SPORTS', 'CROSSDRESSING', 'DELINQUENTS', 'DETECTIVE', 'EDUCATIONAL', 'GAG_HUMOR', 'GORE', 'HAREM', 'HIGH_STAKES_GAME', 'HISTORICAL', 'IDOLS_FEMALE', 'IDOLS_MALE', 'ISEKAI', 'IYASHIKEI', 'LOVE_POLYGON', 'LOVE_STATUS_QUO', 'MAGICAL_SEX_SHIFT', 'MAHOU_SHOUJO', 'MARTIAL_ARTS', 'MECHA', 'MEDICAL', 'MEMOIR', 'MILITARY', 'MUSIC', 'MYTHOLOGY', 'ORGANIZED_CRIME', 'OTAKU_CULTURE', 'PARODY', 'PERFORMING_ARTS', 'PETS', 'PSYCHOLOGICAL', 'RACING', 'REINCARNATION', 'REVERSE_HAREM', 'SAMURAI', 'SCHOOL', 'SHOWBIZ', 'SPACE', 'STRATEGY_GAME', 'SUPER_POWER', 'SURVIVAL', 'TEAM_SPORTS', 'TIME_TRAVEL', 'URBAN_FANTASY', 'VAMPIRE', 'VIDEO_GAME', 'VILLAINESS', 'VISUAL_ARTS', 'WORKPLACE', name='titlegenre'),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=False)
    # ### end Alembic commands ###
